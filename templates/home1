<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Classroom</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="{{ url_for('static', filename='custom.js') }}"></script>
  <link rel="stylesheet" href="{{ url_for('static', filename='custom.css') }}">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
            font-weight: bold;
        }
        *:focus {
            outline: 3px solid #81002b;
            outline-offset: 2px;
        }
        .nav-item:focus,
        .tool-button:focus,
        .join-button:focus,
        .class-card:focus-within {
            box-shadow: 0 0 0 3px #81002b;
        }
        .skip-link {
            position: absolute;
            top: -40px;
            left: 0;
            background: #81002b;
            color: white;
            padding: 8px;
            z-index: 100;
            transition: top 0.3s;
        }

        .skip-link:focus {
            top: 0;
        }

        .sidebar {
            width: 280px;
            height: 100vh;
            border-right: 1px solid #e0e0e0;
            padding: 20px;
            position: fixed;
            background: white;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            border-bottom: 1px solid #e0e0e0;
            background: white;
            position: fixed;
            top: 0;
            left: 280px;
            right: 0;
        }

        .main-content {
            margin-left: 280px;
            padding: 80px 20px 20px;
            background: #f5f5f5;
            min-height: 100vh;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 16px;
            margin-bottom: 10px;
            border-radius: 8px;
            cursor: pointer;
            color: #333;
            font-size: 16px;
        }

        .nav-item:hover {
            background: #f5f5f5;
        }

        .nav-item.active {
            background: #740328;
        }

        .nav-item i {
            margin-right: 12px;
            width: 24px;
            font-size: 18px;
        }

        .ai-tools {
            font-size: 18px;
            padding: 16px;
            margin-top: 40px;
        }
        .ai-tools .nav-item {
            font-size: 18px;
            color: white; /* Changed from #500323 to white */
        }

        /* ... rest of the existing styles ... */

        /* Make sure the Mitra icon is also white */
        .ai-tools .nav-item i {
            color: white;
        }
        

        .class-card {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            width: 350px;
            height: 300px;  /* Added fixed height */
            margin: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            display: flex;  /* Added flex display */
            flex-direction: column;  /* Stack children vertically */
        }

        .class-header {
            padding: 40px;  /* Increased padding */
            color: white;
        }

        .math {
            background: #e21257;
        }

        .science {
            background: #740328;
        }

        .class-content {
            padding: 40px;  /* Increased padding */
            display: flex;
            justify-content: flex-end;
            gap: 20px;
            margin-top: auto;  /* Push content to bottom */
        }

        .class-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
        }
        .font-tool{
            background: #81002b;
            color: white;
            border: none;
            padding:8px 16px;
            border-radius: 20px;
            cursor:pointer;
        }
        .join-button {
            background: #81002b;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
        }

        .user-profile {
            width: 32px;
            height: 32px;
            background: #e60050;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .bottom-tools {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: flex;
            gap: 15px;
        }

        .tool-button {
            background: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 2px 4px rgba(255, 188, 221, 0.1);
        }

        .ai-tool-item {
            color: #360010;
        }

        .font-tool {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .nav-item {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 10px 20px;
            background-color: #81002b;
            color: white;
            border-radius: 8px;
            transition: background-color 0.3s ease;
        }
        
        .nav-item:hover {
            background-color: #a60039;
        }
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltip-text {
            visibility: hidden;
            width: 200px;
            background-color: #360010;
            color: #ffffff;
            text-align: center;
            border-radius: 6px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 14px;
            font-weight: normal;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Arrow for tooltip */
        .tooltip .tooltip-text::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #333 transparent transparent transparent;
        }

        /* Show tooltip on hover and focus */
        .tooltip:hover .tooltip-text,
        .tooltip:focus .tooltip-text,
        .tooltip:focus-within .tooltip-text {
            visibility: visible;
            opacity: 1;
        }

        /* Adjust tooltip position for different elements */
        .header .tooltip .tooltip-text {
            bottom: auto;
            top: 125%;
        }

        .header .tooltip .tooltip-text::after {
            top: auto;
            bottom: 100%;
            border-color: transparent transparent #333 transparent;
        }
        @keyframes flicker {
          0% { background-color: #FF0000; }
          20% { background-color:rgb(0, 139, 0); }
          40% { background-color:rgb(0, 0, 82); }
          60% { background-color:rgb(153, 153, 25); }
          80% { background-color:rgb(98, 0, 98); }
          100% { background-color:rgb(0, 145, 145); }
      }
      
      .flickering {
          animation: flicker 1s infinite;
      }
      
      .flicker-button {
          background-color: #81002b;
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 8px;
          cursor: pointer;
          font-size: 16px;
          transition: background 0.3s ease;
      }
      
      .flicker-button:hover {
          background-color: #a60039;
      }
      
        
    </style>
</head>
<body>
    <a href="#main-content" class="skip-link">Skip to main content</a>
    <div class="sidebar" role="navigation" aria-label="Main navigation">
        <h2 id="site-title" style="margin-bottom: 20px; font-size: 24px;">Classroom</h2>
        <nav>
            <div class="nav-item active" role="button" tabindex="0" aria-current="page" 
                 onkeypress="if(event.key==='Enter') this.click()">
                <i class="fas fa-home" aria-hidden="true"></i>
                <span>Home</span>
            </div>

            <div class="nav-item" role="button" tabindex="0" 
                 onkeypress="if(event.key==='Enter') window.location.href='/todo'"
                 onclick="window.location.href='/todo'">
                <i class="fas fa-tasks" aria-hidden="true"></i>
                <span>To-do</span>
            </div>
            
            <div class="nav-item" role="button" tabindex="0"
            onkeypress="if(event.key==='Enter') window.location.href='/todo'"
            onclick="window.location.href='/todo'">
                <i class="fas fa-user-graduate"></i>
                <span>Enrolled</span>
            </div>

            <div class="nav-item" role="button" tabindex="0"
            onkeypress="if(event.key==='Enter') window.location.href='/todoo'"
            onclick="window.location.href='/todo'">
                <i class="fas fa-flask"></i>
                <span>Science</span>
                <div class="circle-badge"></div>
            </div>
            <div class="nav-item" role="button" tabindex="0"
            onkeypress="if(event.key==='Enter')window.location.href='/todo'"
            onclick="window.location.href='/todo'">
                <i class="fas fa-calculator"></i>
                <span>Mathematics</span>
                <div class="circle-badge"></div>
            </div>
        </nav>
        
        <div class="ai-tools" role="region" aria-labelledby="ai-tools-heading">
            <h3 id="ai-tools-heading" style="margin-bottom: 20px;">AI Tools</h3>
            <div class="nav-item tooltip" role="button" tabindex="0"
                 onkeypress="if(event.key==='Enter') this.click()">
                <i class="fas fa-robot" aria-hidden="true"></i>
                <span>Mitra</span>
                <span class="tooltip-text" role="tooltip">Need help? Click here to chat with Mitra, your friendly assistant!</span>
            </div>
            <div class="nav-item tooltip">
                <button id="anvaya-item" class="flicker-button" aria-label="Activate Anvaya AI">
                    <i class="fas fa-mouse-pointer" aria-hidden="true"></i>
                    <span>Anvaya</span>
                    <span class="tooltip-text" role="tooltip">Need guidance for navigation? Click here to let Anvaya assist you!</span>
                </button>
            </div>
        </div>
    </div>

    <header class="header" role="banner">
        <div style="display: flex; align-items: center;">
            <button style="background: none; border: none; margin-right: 20px;" aria-label="Toggle menu">
                <i class="fas fa-bars" aria-hidden="true"></i>
            </button>
            <h2>Classroom</h2>
        </div>
        <div style="display: flex; align-items: center; gap: 20px;">
            <button class="font-tool tooltip" aria-haspopup="true" aria-expanded="false"
                    onclick="toggleDropdown('fontDropdown')">
                <i class="fas fa-t" aria-hidden="true"></i>
                <span>Text Font</span>
                <span class="tooltip-text" role="tooltip">Click to change Text font</span>
            </button>
            <button class="join-button" aria-label="Join new class">
                + Join Class
            </button>
            <button class="user-profile tooltip" aria-label="User profile">
                <i class="fas fa-user" aria-hidden="true"></i>
                <span class="tooltip-text" role="tooltip">View Profile</span>
            </button>
        </div>
    </header>


    <main id="main-content" class="main-content" role="main">
        <div class="class-grid" role="list">
            <div class="class-card" role="listitem" tabindex="0">
                <div class="class-header math">
                    <h3>Mathematics</h3>
                    <div style="font-size: 14px;">Ms Anita</div>
                </div>
                <div class="class-content">
                    <button style="background: none; border: none;" aria-label="Open folder">
                        <i class="fas fa-folder" aria-hidden="true"></i>
                    </button>
                    <button style="background: none; border: none;" aria-label="Toggle selection">
                        <i class="far fa-square" aria-hidden="true"></i>
                    </button>
                </div>
            </div>
            
            <div class="class-card" role="listitem" tabindex="0">
                <div class="class-header science">
                    <h3>Science</h3>
                    <div style="font-size: 14px;">Mr Amit</div>
                </div>
                <div class="class-content">
                    <button style="background: none; border: none;" aria-label="Open folder">
                        <i class="fas fa-folder" aria-hidden="'true"></i>
                    </button>
                    <button style="background: none; border: none;" aria-label="Toggle selection">
                        <i class="far fa-square" aria-hidden="true"></i>
                    </button>
                </div>
            </div>
        </div>
    </main>
    <div class="settings-container" role="complementary" aria-label="Display settings">
        <div class="settings-btn" role="button" tabindex="0" 
             onclick="toggleDropdown('fontDropdown')"
             onkeypress="if(event.key==='Enter') toggleDropdown('fontDropdown')"
             aria-expanded="false" aria-controls="fontDropdown">Font</div>
        <div class="dropdown" id="fontDropdown" role="menu">
            <button role="menuitem" onclick="setFont('Arial')">Arial</button>
            <button role="menuitem" onclick="setFont('Courier New')">Courier New</button>
            <button role="menuitem" onclick="setFont('Georgia')">Georgia</button>
        </div>
    
        <div class="settings-btn" onclick="toggleSlider('fontSizeSlider')">Font Size</div>
        <div class="slider" id="fontSizeSlider">
            <input type="range" min="10" max="50" value="16" onchange="setFontSize(this.value)">
            <p>Font Size: <span id="fontSizeValue">16px</span></p>
        </div>
    
        <div class="settings-btn" onclick="toggleSlider('contrastSlider')">Contrast</div>
        <div class="slider" id="contrastSlider">
            <input type="range" min="0.5" max="2" value="1" step="0.1" onchange="setContrast(this.value)">
            <p>Contrast: <span id="contrastValue">1</span></p>
        </div>
    </div>
    <div class="bottom-tools">
        <button class="tool-button">
            <i class="fas fa-image"></i>
            Image to Text
        </button>
        <button class="tool-button">
            <i class="fas fa-closed-captioning"></i>
            Video Captions
        </button>
        <button class="tool-button">
            <i class="fas fa-file-alt"></i>
            Video Summary
        </button>
    </div>

    <script>
      let recognition;
      let pauseTimer;
      
      function initializeSpeechRecognition() {
          recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
          recognition.lang = 'en-US';
          recognition.interimResults = false; // Don't show partial results
          recognition.maxAlternatives = 1; // Only accept the best alternative
          recognition.continuous = false;
      
          // When speech recognition result is available
          recognition.onresult = function(event) {
              const transcript = event.results[0][0].transcript;
              console.log('Recognized command:', transcript);
              console.log(transcript)
      
              // Send the recognized command to the backend for processing
              fetch('/process_command', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ command: transcript })
              })
              .then(response => response.json())
              .then(data => {
                  window.location.href = data.redirect_url;  // Redirect to the URL received from the backend
              })
              .catch(err => console.error('Error:', err));
          };
      
          // Handle errors
          recognition.onerror = function(event) {
              console.error('Error occurred in recognition:', event.error);
          };
      
          // Restart recognition on end to handle longer speech
          recognition.onend = function() {
              if (!pauseTimer) recognition.start();
          };
      }
      function handleDropdownKeyPress(event, dropdownId) {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                toggleDropdown(dropdownId);
            }
        }
        function toggleDropdown(id) {
            const dropdown = document.getElementById(id);
            const isExpanded = dropdown.classList.contains('show');
            
            // Update ARIA attributes
            const trigger = dropdown.previousElementSibling;
            trigger.setAttribute('aria-expanded', !isExpanded);
            
            dropdown.classList.toggle('show');
            
            // If opening, focus the first interactive element
            if (!isExpanded) {
                const firstButton = dropdown.querySelector('button');
                if (firstButton) firstButton.focus();
            }
        }
        function handleSliderKeyboard(event, sliderId) {
            const slider = document.getElementById(sliderId);
            const input = slider.querySelector('input[type="range"]');
            
            switch(event.key) {
                case 'ArrowRight':
                case 'ArrowUp':
                    input.value = Number(input.value) + Number(input.step);
                    break;
                case 'ArrowLeft':
                case 'ArrowDown':
                    input.value = Number(input.value) - Number(input.step);
                    break;
            }
            input.dispatchEvent(new Event('change'));
            document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                // Close any open dropdowns
                document.querySelectorAll('.dropdown.show').forEach(dropdown => {
                    dropdown.classList.remove('show');
                    const trigger = dropdown.previousElementSibling;
                    trigger.setAttribute('aria-expanded', 'false');
                    trigger.focus();
                });
            }
        });
      
      // Submit the recognized command if no new input for 5 seconds
      function resetPauseTimer() {
          if (pauseTimer) clearTimeout(pauseTimer);  // Clear any existing timer
          pauseTimer = setTimeout(() => {
              recognition.stop();  // Stop recognition after 5 seconds of inactivity
      
              // Remove flickering effect from the button when recognition stops
              document.getElementById('anvaya-item').classList.remove('flickering');
          }, 5000);  // 5 seconds pause
      }
      document.querySelectorAll('.tooltip').forEach(tooltip => {
            tooltip.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    const tooltipText = tooltip.querySelector('.tooltip-text');
                    tooltipText.style.visibility = 'visible';
                    tooltipText.style.opacity = '1';
                }
            });

            tooltip.addEventListener('blur', (e) => {
                const tooltipText = tooltip.querySelector('.tooltip-text');
                tooltipText.style.visibility = 'hidden';
                tooltipText.style.opacity = '0';
            });
        });
      // Detect speech input pauses
      recognition.onaudiostart = resetPauseTimer;  // Reset the timer when speech starts
      recognition.onend = resetPauseTimer;  // Reset the timer when speech ends
      

  </script>
</body>
</html>
